name: Docker Image Release
# Ricorda di pushare il tag

on:
  push:
    branches:
      - main

jobs:
  release-and-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Fetch Tags
        run: git fetch --tags

      - name: Get Version
        id: versioning
        run: |
          # Controllo se ci sono tag nel repository
          if [[ $(git tag) ]]; then
            # Se ci sono tag, ottieni l'ultimo tag
            LAST_TAG=$(git describe --tags --abbrev=0)
          else
            # Se non ci sono tag, crea un nuovo tag v0.0.0
            LAST_TAG="v0.0.0"
            git tag $LAST_TAG
            git push --tags
          fi

          # Separazione delle parti della versione
          IFS='.' read -ra VERSION_PARTS <<< "$LAST_TAG"

          git log --format=%B -n 1 $GITHUB_SHA

          # Aggiornamento della versione in base al commit
          if git log --format=%B -n 1 $GITHUB_SHA | grep -q "version-major"; then
            ((VERSION_PARTS[0]++))
            VERSION_PARTS[1]=0
            VERSION_PARTS[2]=0
          elif git log --format=%B -n 1 $GITHUB_SHA | grep -q "version-mid"; then
            ((VERSION_PARTS[1]++))
            VERSION_PARTS[2]=0
          elif git log --format=%B -n 1 $GITHUB_SHA | grep -q "version-minor"; then
            ((VERSION_PARTS[2]++))
          fi

          # Costruzione della versione aggiornata
          UPDATED_VERSION=$(printf "%s.%s.%s" "${VERSION_PARTS[0]}" "${VERSION_PARTS[1]}" "${VERSION_PARTS[2]}")
          echo "Updated Version: $UPDATED_VERSION"
          echo "::set-output name=updated_version::$UPDATED_VERSION"

        env:
          GITHUB_SHA: ${{ github.sha }}

      - name: Log in to GitHub Packages
        run: echo "${{ secrets.PAT }}" | docker login docker.pkg.github.com -u farmacodeunipd --password-stdin

      - name: Set up Docker Compose
        run: docker-compose up -d

      - name: Run tests
        run: docker exec poc_python-api_1 pytest tests/test_algo.py
        continue-on-error: true

      - name: Check test status and push Docker images
        if: ${{ failure() != true }}
        run: |
          docker images
          IMAGES=("poc_db" "poc_python-api" "poc_react-app" "poc_express")
          for IMAGE in "${IMAGES[@]}"; do
            docker tag $IMAGE docker.pkg.github.com/farmacodeunipd/poc/$IMAGE:${{ steps.versioning.outputs.updated_version }}
            docker push docker.pkg.github.com/farmacodeunipd/poc/$IMAGE:${{ steps.versioning.outputs.updated_version }}
            
            docker tag $IMAGE docker.pkg.github.com/farmacodeunipd/poc/$IMAGE:latest
            docker push docker.pkg.github.com/farmacodeunipd/poc/$IMAGE:latest
          done

      - name: Stop and remove Docker containers
        run: docker-compose down

      - name: Create GitHub Release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ steps.versioning.outputs.updated_version }}
          release_name: Release ${{ steps.versioning.outputs.updated_version }}
          body: |
            Release ${{ steps.versioning.outputs.updated_version }}
        env:
          GITHUB_TOKEN: ${{ secrets.PAT }}
