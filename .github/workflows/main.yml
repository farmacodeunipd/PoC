name: Docker Image Release

on:
  push:
    branches:
      - main

jobs:
  build-and-push-images:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Fetch Tags
        run: git fetch --tags

      - name: Get Version
        run: |
          if [ -n "$(git tag --contains $GITHUB_SHA)" ]; then
            VERSION=$(git describe --tags --abbrev=0)
          else
            VERSION=$(git describe --always --abbrev=0)
          fi
          echo "Version: $VERSION"
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          
          # Increment version based on commit messages
          if git log --format=%B -n 1 $GITHUB_SHA | grep -q "version-major"; then
            VERSION=$(echo $VERSION | awk -F. '{$1++; print $0}')
          elif git log --format=%B -n 1 $GITHUB_SHA | grep -q "version-mid"; then
            VERSION=$(echo $VERSION | awk -F. '{$2++; print $0}')
          elif git log --format=%B -n 1 $GITHUB_SHA | grep -q "version-minor"; then
            VERSION=$(echo $VERSION | awk -F. '{$3++; print $0}')
          fi
          echo "Updated Version: $VERSION"
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          
        env:
          GITHUB_SHA: ${{ github.sha }}

      - name: Build Docker images
        run: docker-compose build

      - name: Tag and Push Docker images
        run: |
          docker images
          IMAGES=("db" "python-api" "react-app" "express") # List of image names
          for IMAGE in "${IMAGES[@]}"; do
            docker tag $IMAGE docker.pkg.github.com/farmacodeunipd/poc/$IMAGE:$VERSION
            docker push docker.pkg.github.com/farmacodeunipd/poc/$IMAGE:$VERSION
          done

  deployment:
    runs-on: ubuntu-latest

    steps:
      - name: Log in to GitHub Packages
        run: echo "${{ secrets.PAT }}" | docker login docker.pkg.github.com -u farmacodeunipd --password-stdin

      - name: Checkout
        run: ls

      - name: Set up Docker Compose
        run: docker-compose up -d

      - name: Run tests
        run: docker exec poc_python-api_1 pytest tests/test_algo.py
        continue-on-error: true

      - name: Check test status and push Docker images
        if: ${{ failure() != true }}
        run: docker-compose push

      - name: Stop and remove Docker containers
        run: docker-compose down

      - name: Create GitHub Release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ env.VERSION }}
          release_name: Release ${{ env.VERSION }}
          body: |
            Release ${{ env.VERSION }}